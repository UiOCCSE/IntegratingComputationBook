TITLE: Integrating a computational perspective in physics courses
AUTHOR: Daniel Marcos Caballero at  Department of Physics and Astronomy, Michigan State University, East Lansing, 48824 Michigan, USA & Department of Physics and Center for Computing in Science Education, University of Oslo, N-0316 Oslo, Norway 
AUTHOR: Morten Hjorth-Jensen at  Department of Physics and Astronomy and National Superconducting Cyclotron Laboratory, Michigan State University, East Lansing, 48824 Michigan, USA & Department of Physics and Center for Computing in Science Education, University of Oslo, N-0316 Oslo, Norway 
DATE: today



===== Introduction =====

Many important recent advances in our understanding of the physical
world have been driven by large-scale computational modeling and data
analysis, for example, the 2012 discovery of the Higgs boson, the 2013
Nobel Prize in chemistry for computational modeling of molecules, and
the 2016 discovery of gravitational Waves.  Given the ubiquitous use
in science and its critical importance to the future of science and
engineering, scientific computing plays a central role in scientific
investigations and is central to innovation in most domains of our
lives. It underpins the majority of today's technological, economic
and societal feats and we have entered an era in which huge amounts of
data offer enormous opportunities. "By 2020, it is also expected that one out of every two
jobs in the STEM (Science, Technology, Engineering and Mathematics) fields will be in
computing":"http://pathways.acm.org/executive-summary.html"
(Association for Computing Machinery, 2013).

These developments, needs and future challenges, as well as the
developments which are now taking place within quantum computing,
quantum information theory and data driven discoveries (data analysis and
machine learning) will play an essential role in shaping future
technological developments. Most of these developments require true
cross-disciplinary approaches and bridge a vast range of
temporal and spatial scales and include a wide variety of physical
processes. To develop computational tools for such complex
systems that give physically meaningful insights requires a deep
understanding of approximation theory, high performance computing, and
domain specific knowledge of the area one is modeling.

Computing competence represents thus a central element in scientific
problem solving, from basic education and research to essentially
almost all advanced problems in modern societies. And these competences are not limited to STEM fields only. The statistical 
analysis of big data sets and how to use machine leraning algorithm, belong nowadays to the set of tools needed by almost all disciplines, spanning from the Social Sciences, Law, Education the tradtional STEM fields and Life Science.
Unfortunately, many
of our students at both the undergraduate and the graduate level are
unprepared to use computational modeling, data science, and high
performance computing, skills that are much valued by a broad range of
employers.  Furthermore, although many universities do offer
compulsory programming courses in scientific computing, and physics
departments offer one or several elective courses in computational physics, there is not a uniform and coherent approach to what we mean
by computing competences and computational thinking. This has in turn consequences for a systematic introduction and realization of 
computing skills and competences and pertaining learning outcomes. 

The aim of this contribution is thus to present examples based on our experiences 



Computing competence _enlarges the body of tools available to students_ and
scientists beyond classical tools and _allows for a more generic
handling of problems_. Focusing on algorithmic aspects _results in
deeper insights_ about scientific problems.


* Computing in basic physics courses allows us to bring important elements of scientific methods at a much earlier stage in our students' education.
* It gives the students skills and abilities that are asked for by society.
* It gives us as university teachers a unique opportunity to enhance students' insights about physics and how to solve scientific problems.
* Combined with a strong Physics Education Research group, MSU is in a unique position among Big Ten universities and, likely, the country.

=== Computing competence ===

_Computing means solving scientific problems using all possible tools_, including symbolic computing, computers and numerical algorithms, and analytical paper and pencil solutions .

_Computing is about developing an understanding of the scientific method_ by enhancing algorithmic thinking when solving problems.

On the part of students, this competence involves being able to:

* understand how algorithms are used to solve mathematical problems,
* derive, verify, and implement algorithms,
* understand what can go wrong with algorithms,
* use these algorithms to construct reproducible scientific outcomes and to engage in science in ethical ways, and
* think algorithmically for the purposes of gaining deeper insights about scientific problems.

=== Better understanding of the scientific method ===
All these elements are central for maturing and gaining a better understanding of the modern scientific process *per se*.

The power of the scientific method lies in identifying a given problem
as a special case of an abstract class of problems, identifying
general solution methods for this class of problems, and applying a
general method to the specific problem (applying means, in the case of
computing, calculations by pen and paper, symbolic computing, or
numerical computing by ready-made and/or self-written software). This
generic view on problems and methods is particularly important for
understanding how to apply available, generic software to solve a
particular problem.

=== Why should basic university education undergo a shift towards modern computing?  ===

* Algorithms involving pen and paper are traditionally aimed at what we often refer to as continuous models.
* Application of computers calls for approximate discrete models.
* Much of the development of _methods for continuous models are now being replaced by methods  for discrete models_ in science and industry, simply because _much larger classes of problems can be addressed_ with discrete models, often also by simpler and more generic methodologies.

*However, verification of algorithms and understanding their limitations requires much of the classical knowledge about continuous models.*

So, why should basic university education undergo a shift towards modern computing?

The impact of the computer on mathematics and science is tremendous: _science and industry now rely on solving mathematical problems through computing_.
* Computing can increase the relevance in education by solving more realistic problems earlier.
* Computing through programming can be excellent training of creativity.
* Computing can enhance the understanding of abstractions and generalization.
* Computing can decrease the need for special tricks and tedious algebra, and shifts the focus to problem definition, visualization, and "what if" discussions.

Algorithmic  thinking as a way to

* Enhance instruction based teaching
* Introduce Research based teaching  from day one
* Trigger further insights in math and other disciplines 
* Validation and verification of scientific results (the PRL example), with the possibility to emphasize ethical aspects as well. Version control is central.
* Good working practices from day one.



* How can we include and integrate an algorithmic (computational) perspective   in our basic education?
* Can this enhance the students' understanding of mathematics and science?
* Can it strengthen research based teaching?


=== What is needed? ===
!bblock Programming
A compulsory programming course with a strong mathematical flavour. *Should give a solid foundation in programming as a problem solving technique in mathematics*. Programming is understanding! The line of thought when solving mathematical problems numerically enhances algorithmic thinking,  and thereby the students' understanding of the scientific process.
!eblock

!bblock Mathematics and numerics
Mathematics is at least as important as before, but should be supplemented with development, analysis, implementation, verification and validation of numerical methods. Science ethics and better understanding of the pedagogical process, almost for free!
!eblock

!bblock Sciences
Training in modeling and problem solving with numerical methods and visualisation, as well as traditional methods in Science courses, Physics, Chemistry, Biology, Geology, Engineering...
!eblock

=== Implementation ===
Crucial ingredients

* Support from governing bodies (high priorities at the College of Natural Science at UOslo and the Physics and Astronomy department of Michigan State University)
* Cooperation across departmental boundaries
* Willingness by individuals to give priority to teaching reform

Consensus driven approach.

=== Implementation in Oslo: The "C(omputing in)S(cience)E(Education)":"http://www.mn.uio.no/ccse/english/people/index.html"  project ===
What we do
* Coordinated use of computational exercises and numerical tools in most undergraduate courses.
* Help update the scientific staff's competence on computational aspects and give support (scientific, pedagogical and financial)  to those who wish to revise  their courses in a computational direction.
* Teachers get good summer students to aid in introducing computational exercises
* Develop courses and exercise modules with a computational perspective, both for students and teachers. New textbooks!! 
* Basic idea: mixture of mathematics, computation, informatics and topics from the physical sciences.
 
Interesting outcome: higher focus on teaching and pedagogical issues!!

=== Example: Computations from day one ===
Differentiation and comparison with symbolic expressions
Combined with the possibility of symbolic calculations with *Sympy*, Python offers an environment where students and teachers alike can test many different aspects of mathematics and numerical mathematics, in addition to being able to verify and validate their codes. The following simple example shows how to extend the simple function for computing the numerical derivative with the possibility of obtaining the closed form or analytical expression
!bc pycod
def differentiate(f, x, h=1E-5, symbolic=False):
    if symbolic:
        import sympy
        return sympy.lambdify([x], sympy.diff(f, x))
    else:
        return (f(x+h) - f(x-h))/(2*h)
!ec

=== Other Examples ===
Integration by Trapezoidal Rule 
 
* Definition of integration  in MAT1100 (Calculus and analysis).
* The algorithm for computing the  integral vha the Trapezoidal rule for an interval $x \in [a,b]$
!bt
\[
  \int_a^b(f(x) dx \approx \frac{1}{2}\left [f(a)+2f(a+h)+\dots+2f(b-h)+f(b)\right] 
\]
!et
* Taught   in MAT-INF1100  (Mathematical modelling)

* The algorithm is then implemented in  INF1100 (programming course).



!bc pycod
from math import exp, log, sin
def Trapez(a,b,f,n):
   h = (b-a)/float(n)
   s = 0
   x = a
   for i in range(1,n,1):
       x = x+h
       s = s+ f(x)
   s = 0.5*(f(a)+f(b)) +s
   return h*s

def f1(x):
    return exp(-x*x)*log(1+x*sin(x))

a = 1;  b = 3; n = 1000
result = Trapez(a,b,f1,n)
print(result)
!ec

Python offers an  extremely versatile programming  environment, allowing for
the inclusion of analytical studies in a numerical program. Here we show an
example code with the _trapezoidal rule_ using _SymPy_ to evaluate an integral and compute the absolute error
with respect to the numerically evaluated one of the integral
$\int_0^1 dx x^2 = 1/3$:
!bc pyscpro
from math import *
from sympy import *
def Trapez(a,b,f,n):
   h = (b-a)/float(n)
   s = 0
   x = a
   for i in range(1,n,1):
       x = x+h
       s = s+ f(x)
   s = 0.5*(f(a)+f(b)) +s
   return h*s

#  function to compute pi
def function(x):
    return x*x

a = 0.0;  b = 1.0; n = 100
result = Trapez(a,b,function,n)
print("Trapezoidal rule=", result)
# define x as a symbol to be used by sympy
x = Symbol('x')
exact = integrate(function(x), (x, 0.0, 1.0))
print("Sympy integration=", exact)
# Find relative error
print("Relative error", abs((exact-result)/exact))
!ec

=== Error analysis ===

The following extended version of the trapezoidal rule allows you  to plot the relative error by comparing with the exact result. By increasing to $10^8$ points one arrives at a region where numerical errors start to accumulate.
!bc pyscpro
from math import log10
import numpy as np
from sympy import Symbol, integrate
import matplotlib.pyplot as plt
# function for the trapezoidal rule
def Trapez(a,b,f,n):
   h = (b-a)/float(n)
   s = 0
   x = a
   for i in range(1,n,1):
       x = x+h
       s = s+ f(x)
   s = 0.5*(f(a)+f(b)) +s
   return h*s
#  function to compute pi
def function(x):
    return x*x
# define integration limits
a = 0.0;  b = 1.0;
# find result from sympy
# define x as a symbol to be used by sympy
x = Symbol('x')
exact = integrate(function(x), (x, a, b))
# set up the arrays for plotting the relative error
n = np.zeros(9); y = np.zeros(9);
# find the relative error as function of integration points
for i in range(1, 8, 1):
    npts = 10**i
    result = Trapez(a,b,function,npts)
    RelativeError = abs((exact-result)/exact)
    n[i] = log10(npts); y[i] = log10(RelativeError);
plt.plot(n,y, 'ro')
plt.xlabel('n')
plt.ylabel('Relative error')
plt.show()
!ec

=== Integrating numerical mathematics with calculus ===
The last example shows the potential of combining numerical algorithms with symbolic calculations, allowing thereby students and teachers to

* Validate and verify  their  algorithms. 
* Including concepts like unit testing, one has the possibility to test and validate several or all parts of the code.
* Validation and verification are then included *naturally* and one can develop a better attitude to what is meant with an ethically sound scientific approach.
* The above example allows the student to also test the mathematical error of the algorithm for the trapezoidal rule by changing the number of integration points. The students get trained from day one to think error analysis. 
* With an Jupyter/Ipython notebook the students can keep exploring similar examples and turn them in as their own notebooks. 

=== Additional benefits: A structured approach to solving problems ===

In this process we easily bake in
 o   How to structure a code in terms of functions
 o   How to make a module
 o   How to read input data flexibly from the command line
 o   How to create graphical/web user interfaces
 o   How to write unit tests (test functions or doctests)
 o   How to refactor code in terms of classes (instead of functions only)
 o   How to conduct and automate large-scale numerical experiments
 o   How to write scientific reports in various formats (LaTeX, HTML)

Additional benefits: A structure approach to solving problems

The conventions and techniques outlined here will save you a lot of time when you incrementally extend software over time from simpler to more complicated problems. In particular, you will benefit from many good habits:
 o New code is added in a modular fashion to a library (modules)
 o Programs are run through convenient user interfaces
 o It takes one quick command to let all your code undergo heavy testing 
 o Tedious manual work with running programs is automated,
 o Your scientific investigations are reproducible, scientific reports with top quality typesetting are produced both for paper and electronic devices.


=== Learning outcomes three first semesters ===
Knowledge of basic algorithms

* Differential equations: Euler, modified Euler and Runge-Kutta methods (first semester)
* Numerical integration: Trapezoidal and Simpson's rule, multidimensional integrals (first semester)
* Random numbers, random walks, probability distributions and Monte Carlo integration  (first semester)
* Linear Algebra and eigenvalue problems: Gaussian elimination, LU-decomposition, SVD, QR, Givens rotations and eigenvalues, Gauss-Seidel. (second and third semester)
* Root finding and interpolation etc. (all three first semesters)
* Processing of sound and images (first semester).

The students have to code several of these algorithms during the first three semesters.

=== Later courses ===

_Later courses should build on this foundation as much as possible_.

o In particular, the course should not be too basic! There should be progression in the use of mathematics, numerical methods and programming, as well as science.


o Computational platform: Python, fully object-oriented and allows for seamless integration of c++ and Fortran codes, as well as Matlab-like programming environment. Makes it easy to parallelize codes as well.


=== Coordination ===

* Teachers in other courses need therefore not use much time on numerical tools. Naturally included in other courses.

=== Challenges...  ===
 .. and objections

*Standard objection: computations take away the attention from other central topics in 'my course'*. 

CSE incorporates computations from day one, and courses higher up do not need to
spend time on computational topics  (technicalities), but can focus on the interesting
science applications.  Coordination and synchronization across departments and courses. Increases collaboration on teaching and awareness of pedagical research.

* To help teachers: Developed pedagogical modules which can aid university teachers. Own course for teachers.




=====  Examples of simple algorithms, initial value problems and proper scaling of equations =====

 o Ordinary differential equations (ODE): RLC circuit
 o ODE: Classical pendulum
 o ODE: Solar system
 o and many more cases

Can use essentially the _same algorithms to solve these problems_, either some simple modified Euler algorithms or some Runge-Kutta class of algorithms or perhaps the so-called Verlet class of algorithms.  _Algorithms students use in one course can be reused in other courses_.

=== Mechanics and electromagnetism, initial value problems  ===

When properly scaled, these equations are essentially the same. Scaling is important.

Classical pendulum with damping and external force as it could appear in a mechanics course (PHY 321)
!bt
\[
  ml\frac{d^2\theta}{dt^2}+\nu\frac{d\theta}{dt}  +mgsin(\theta)=Acos(\omega t).
\]
!et
Easy to solve numerically and then visualize the solution.
Almost the same equation for an RLC circuit in the electromagnetism course (PHY 482)
!bt
\[
L\frac{d^2Q}{dt^2}+\frac{Q}{C}+R\frac{dQ}{dt}=Acos(\omega t).
\]
!et

=== Mechanics and electromagnetism, initial value problems and now proper scaling  ===

Classical pendulum equations with damping and external force
!bt
\[
   \frac{d\theta}{d\hat{t}} =\hat{v},
\]
!et
and
!bt
\[
   \frac{d\hat{v}}{d\hat{t}} =Acos(\hat{\omega} \hat{t})-\hat{v}\xi-\sin(\theta),
\]
!et
with $\omega_0=\sqrt{g/l}$, $\hat{t}=\omega_0 t$ and $\xi = mg/\omega_0\nu$.

The RLC circuit
!bt
\[
   \frac{dQ}{d\hat{t}} =\hat{I},
\]
!et
and
!bt
\[
   \frac{d\hat{I}}{d\hat{t}} =Acos(\hat{\omega} \hat{t})-\hat{I}\xi-Q,
\]
!et
with $\omega_0=1/\sqrt{LC}$, $\hat{t}=\omega_0 t$ and $\xi = CR\omega_0$.

The equations are essentially the same. _Great potential for abstraction_.

===  Other examples of simple algorithms that can be reused in many courses, two-point boundary value problems and scaling ===

These physics examples can all be studied using almost the same types of algorithms, simple eigenvalue solvers and Gaussian elimination with the same starting matrix!

 o A buckling beam and Toeplitz matrices (mechanics and mathematical methods), eigenvalue problems
 o A particle in an infinite potential well, quantum eigenvalue problems
 o A particle (or two) in a general quantum well, quantum eigenvalue problems
 o Poisson's  equation in one dim, linear algebra (electromagnetism)
 o The diffusion equation in one dimension (Statistical Physics), linear algebra
 o and many other cases

=== A buckling beam, or a quantum mechanical particle in an infinite well ===

This is a two-point boundary value problem
!bt
\[
R \frac{d^2 u(x)}{dx^2} = -F u(x),
\]
!et
where $u(x)$ is the vertical displacement, $R$ is a material specific constant, $F$ the force and $x \in [0,L]$ with $u(0)=u(L)=0$.

Scale equations with $x = \rho L$ and $\rho \in [0,1]$ and get (note that we change from $u(x)$ to $v(\rho)$) 
!bt
\[
\frac{d^2 v(\rho)}{dx^2} +K v(\rho)=0,
\]
!et
a standard eigenvalue problem with $K= FL^2/R$.

If you replace $R=-\hbar^2/2m$ and $-F=\lambda$, we have the quantum mechanical variant for a particle moving in a well with infinite walls at the endpoints.

=== Discretize and get the same type of problem  ===
Discretize the second derivative and the rhs
!bt
\[
    -\frac{v_{i+1} -2v_i +v_{i-i}}{h^2}=\lambda v_i,
\]
!et
with $i=1,2,\dots, n$. We need to add to this system the two boundary conditions $v(0) =v_0$ and $v(1) = v_{n+1}$.
The so-called Toeplitz matrix (special case from the discretized second derivative)
!bt
\[
    \mathbf{A} = \frac{1}{h^2}\begin{bmatrix}
                          2 & -1 &  &   &  & \\
                          -1 & 2 & -1 & & & \\
                           & -1 & 2 & -1 & &  \\
                           & \dots   & \dots &\dots   &\dots & \dots \\
                           &   &  &-1  &2& -1 \\
                           &    &  &   &-1 & 2 \\
                      \end{bmatrix}
\]
!et
with the corresponding vectors $\mathbf{v} = (v_1, v_2, \dots,v_n)^T$ allows us to rewrite the differential equation
including the boundary conditions as a standard eigenvalue problem
!bt
\[
   \mathbf{A}\mathbf{u} = \lambda\mathbf{v}.
\]
!et
The Toeplitz matrix has analytical eigenpairs!! Adding a potential along the diagonals allows us to reuse this problem for many types of physics cases.

=== Adding complexity, hydrogen-like atoms or other one-particle potentials  ===

We are first interested in the solution of the radial part of Schroedinger's equation for one electron. This equation reads
!bt
\[
  -\frac{\hbar^2}{2 m} \left ( \frac{1}{r^2} \frac{d}{dr} r^2
  \frac{d}{dr} - \frac{l (l + 1)}{r^2} \right )R(r)
     + V(r) R(r) = E R(r).
\]
!et
Suppose in our  case $V(r)$ is the harmonic oscillator potential $(1/2)kr^2$ with
$k=m\omega^2$ and $E$ is
the energy of the harmonic oscillator in three dimensions.
The oscillator frequency is $\omega$ and the energies are
!bt
\[
E_{nl}=  \hbar \omega \left(2n+l+\frac{3}{2}\right),
\]
!et
with $n=0,1,2,\dots$ and $l=0,1,2,\dots$.

=== Radial Schroedinger equation  ===

Since we have made a transformation to spherical coordinates it means that
$r\in [0,\infty)$.
The quantum number
$l$ is the orbital momentum of the electron.   Then we substitute $R(r) = (1/r) u(r)$ and obtain
!bt
\[
  -\frac{\hbar^2}{2 m} \frac{d^2}{dr^2} u(r)
       + \left ( V(r) + \frac{l (l + 1)}{r^2}\frac{\hbar^2}{2 m}
                                    \right ) u(r)  = E u(r) .
\]
!et
The boundary conditions are $u(0)=0$ and $u(\infty)=0$.

=== Scaling the equations  ===

We introduce a dimensionless variable $\rho = (1/\alpha) r$
where $\alpha$ is a constant with dimension length and get
!bt
\[
  -\frac{\hbar^2}{2 m \alpha^2} \frac{d^2}{d\rho^2} v(\rho)
       + \left ( V(\rho) + \frac{l (l + 1)}{\rho^2}
         \frac{\hbar^2}{2 m\alpha^2} \right ) v(\rho)  = E v(\rho) .
\]
!et
Let us choose $l=0$.
Inserting $V(\rho) = (1/2) k \alpha^2\rho^2$ we end up with
!bt
\[
  -\frac{\hbar^2}{2 m \alpha^2} \frac{d^2}{d\rho^2} v(\rho)
       + \frac{k}{2} \alpha^2\rho^2v(\rho)  = E v(\rho) .
\]
!et
We multiply thereafter with $2m\alpha^2/\hbar^2$ on both sides and obtain
!bt
\[
  -\frac{d^2}{d\rho^2} v(\rho)
       + \frac{mk}{\hbar^2} \alpha^4\rho^2v(\rho)  = \frac{2m\alpha^2}{\hbar^2}E v(\rho) .
\]
!et

=== A natural length scale comes out automagically when scaling ===
We have thus
!bt
\[
  -\frac{d^2}{d\rho^2} v(\rho)
       + \frac{mk}{\hbar^2} \alpha^4\rho^2v(\rho)  = \frac{2m\alpha^2}{\hbar^2}E v(\rho) .
\]
!et
The constant $\alpha$ can now be fixed
so that
!bt
\[
\frac{mk}{\hbar^2} \alpha^4 = 1,
\]
!et
and it defines a natural length scale (like the Bohr radius does)
!bt
\[
\alpha = \left(\frac{\hbar^2}{mk}\right)^{1/4}.
\]
!et
Defining
!bt
\[
\lambda = \frac{2m\alpha^2}{\hbar^2}E,
\]
!et
we can rewrite Schroedinger's equation as
!bt
\[
  -\frac{d^2}{d\rho^2} v(\rho) + \rho^2v(\rho)  = \lambda v(\rho) .
\]
!et
This is similar to the equation for a buckling beam except for the potential term.
In three dimensions
the eigenvalues for $l=0$ are
$\lambda_0=1.5,\lambda_1=3.5,\lambda_2=5.5,\dots .$


Define first the diagonal matrix element
!bt
\[
   d_i=\frac{2}{h^2}+V_i,
\]
!et
and the non-diagonal matrix element
!bt
\[
   e_i=-\frac{1}{h^2}.
\]
!et
In this case the non-diagonal matrix elements are given by a mere constant. *All non-diagonal matrix elements are equal*.

With these definitions the Schroedinger equation takes the following form
!bt
\[
d_iu_i+e_{i-1}v_{i-1}+e_{i+1}v_{i+1}  = \lambda v_i,
\]
!et
where $v_i$ is unknown. We can write the
latter equation as a matrix eigenvalue problem
!bt
\begin{equation}
    \begin{bmatrix} d_1 & e_1 & 0   & 0    & \dots  &0     & 0 \\
                                e_1 & d_2 & e_2 & 0    & \dots  &0     &0 \\
                                0   & e_2 & d_3 & e_3  &0       &\dots & 0\\
                                \dots  & \dots & \dots & \dots  &\dots      &\dots & \dots\\
                                0   & \dots & \dots & \dots  &\dots       &d_{n_{\mathrm{step}}-2} & e_{n_{\mathrm{step}}-1}\\
                                0   & \dots & \dots & \dots  &\dots       &e_{n_{\mathrm{step}}-1} & d_{n_{\mathrm{step}}-1}

             \end{bmatrix}      \begin{bmatrix} v_{1} \\
                                                              v_{2} \\
                                                              \dots\\ \dots\\ \dots\\
                                                              v_{n_{\mathrm{step}}-1}
             \end{bmatrix}=\lambda \begin{bmatrix}{c} v_{1} \\
                                                              v_{2} \\
                                                              \dots\\ \dots\\ \dots\\
                                                              v_{n_{\mathrm{step}}-1}
             \end{bmatrix}
      label{eq:sematrix}
\end{equation}
!et
or if we wish to be more detailed, we can write the tridiagonal matrix as
!bt
\begin{equation}
    \left( \begin{array}{ccccccc} \frac{2}{h^2}+V_1 & -\frac{1}{h^2} & 0   & 0    & \dots  &0     & 0 \\
                                -\frac{1}{h^2} & \frac{2}{h^2}+V_2 & -\frac{1}{h^2} & 0    & \dots  &0     &0 \\
                                0   & -\frac{1}{h^2} & \frac{2}{h^2}+V_3 & -\frac{1}{h^2}  &0       &\dots & 0\\
                                \dots  & \dots & \dots & \dots  &\dots      &\dots & \dots\\
                                0   & \dots & \dots & \dots  &\dots       &\frac{2}{h^2}+V_{n_{\mathrm{step}}-2} & -\frac{1}{h^2}\\
                                0   & \dots & \dots & \dots  &\dots       &-\frac{1}{h^2} & \frac{2}{h^2}+V_{n_{\mathrm{step}}-1}

             \end{array} \right)
label{eq:matrixse}
\end{equation}
!et
Recall that the solutions are known via the boundary conditions at
$i=n_{\mathrm{step}}$ and at the other end point, that is for  $\rho_0$.
The solution is zero in both cases.

=== The Python (2.7) code ===
The code sets up the Hamiltonian matrix by defining the minimun and maximum values of $r$ with a
maximum value of integration points. It plots the
eigenfunctions of the three lowest eigenstates.
!bc pyscpro
#Program which solves the one-particle Schrodinger equation
#for a potential specified in function
#potential().

from  matplotlib import pyplot as plt
import numpy as np
#Function for initialization of parameters
def initialize():
    RMin = 0.0
    RMax = 10.0
    lOrbital = 0
    Dim = 400
    return RMin, RMax, lOrbital, Dim
# Different types of potentials
def potential(r):
    return 0.5*r*r
    #  return 0.0
    #  return -1.0/r
    #if r >= 0.0 and r <= 10.0:
    #    V = -0.05
    #else:
    #    V =0.0
    #return V

#Get the boundary, orbital momentum and number of integration points
RMin, RMax, lOrbital, Dim = initialize()

#Initialize constants
Step    = RMax/(Dim+1)
DiagConst = 1.0/ (Step*Step)
NondiagConst =  -0.5 / (Step*Step)
OrbitalFactor = 0.5*lOrbital * (lOrbital + 1.0)

#Calculate array of potential values
v = np.zeros(Dim)
r = np.linspace(RMin,RMax,Dim)
for i in xrange(Dim):
    r[i] = RMin + (i+1) * Step;
    v[i] = potential(r[i]) + OrbitalFactor/(r[i]*r[i]);

#Setting up a tridiagonal matrix and finding eigenvectors and eigenvalues
Matrix = np.zeros((Dim,Dim))
Matrix[0,0] = DiagConst + v[0];
Matrix[0,1] = NondiagConst;
for i in xrange(1,Dim-1):
    Matrix[i,i-1]  = NondiagConst;
    Matrix[i,i]    = DiagConst + v[i];
    Matrix[i,i+1]  = NondiagConst;
Matrix[Dim-1,Dim-2] = NondiagConst;
Matrix[Dim-1,Dim-1] = DiagConst + v[Dim-1];
# diagonalize and obtain eigenvalues, not necessarily sorted
EigValues, EigVectors = np.linalg.eig(Matrix)
# sort eigenvectors and eigenvalues
permute = EigValues.argsort()
EigValues = EigValues[permute]
EigVectors = EigVectors[:,permute]
# now plot the results for the three lowest lying eigenstates
for i in xrange(3):
    print EigValues[i]
FirstEigvector = EigVectors[:,0]
SecondEigvector = EigVectors[:,1]
ThirdEigvector = EigVectors[:,2]
plt.plot(r, FirstEigvector**2 ,'b-',r, SecondEigvector**2 ,'g-',r, ThirdEigvector**2 ,'r-')
plt.axis([0,4.6,0.0, 0.025])
plt.xlabel(r'$r$')
plt.ylabel(r'Radial probability $r^2|R(r)|^2$')
plt.title(r'Radial probability distributions for three lowest-lying states')
plt.savefig('eigenvector.pdf')
plt.show()
!ec

===== The power of numerical methods =====

The last example shows the potential of combining numerical algorithms with analytical results (or eventually symbolic calculations), allowing thereby students and teachers to

* make abstraction and explore other physics cases easily where no analytical solutions are known
* Validate and verify  their  algorithms.
* Including concepts like unit testing, one has the possibility to test and validate several or all parts of the code.
* Validation and verification are then included *naturally* and one can develop a better attitude to what is meant with an ethically sound scientific approach.
* The above example allows the student to also test the mathematical error of the algorithm for the eigenvalue solver by changing the number of integration points. The students get trained from day one to think error analysis.
* The algorithm can be tailored to any kind of one-particle problem used in quantum mechanics or eigenvalue problems
* A simple rewrite allows for reuse in linear algebra problems for solution of say Poisson's equation in electromagnetism, or the diffusion equation in one dimension.
* With an ipython notebook the students can keep exploring similar examples and turn them in as their own notebooks.




o  Engage the faculty in the department to understand current best practices, to identify areas of concern, and to solicit ideas for desired learning outcomes and curriculum modifications.
o  Survey current undergraduate students to understand their experiences thus far and identify the types of training that they would like to receive with regards to these subjects.
o  Survey students who recently received a bachelor's degree in physics or astrophysics to identify what aspects of their education have been useful to them thus far, and what they would have liked to have learned while here at MSU.
o  Identify possible areas of collaboration with the Department of Computational Mathematics, Science and Engineering, and explore the possibility of more in-depth educational options (i.e., a computational physics degree).
o  Contact faculty at other institutions that have pursued similar reform efforts to learn about potential opportunities and pitfalls.
o  Synthesize the results obtained from the previous points into a coherent document that will be presented to the faculty for discussion.






=== Which aspects are important for a successful introduction of CSE? ===


* Early introduction, programming course at beginning of studies linked with math courses and science and engineering courses.
* Crucial to learn proper programming at the beginning.
* Good TAs
* Choice of software.
* Textbooks and modularization of topics, ask for details
* Resources and expenses.
* Tailor to specific disciplines.
* Organizational matters.
* With a local  physics education group one can do much more!! At MSU we have a very strong "Physics Education Research group headed by Danny Caballero and Washti Sawtelle":"http://create4stem.msu.edu/group/perl"


===== Summary =====

* Make our research visible in early undergraduate courses, enhance research based teaching
* Possibility to focus more on understanding and increased insight.
* Impetus for broad cooperation in teaching. Broad focus on university pedagogical topics.
* Strengthening of instruction based teaching (expensive and time-consuming).
* Give our candidates a broader and more up-to-date education with a problem-based orientation, often requested by potential employers.
* And perhaps the most important issue: does this enhance the student's insight in the Sciences?

We invite you to visit (online and/or in real life) our new center on "Computing in Science Education":"http://www.mn.uio.no/ccse/english/"




===== What about life science/biology? Overarching questions =====

 Which skills are needed by candidates in biology?
There is new demand for more

  * quantitative methods & reasoning
  * understanding data and phenomena via models
  * creating *in silico* virtual labs

Challenge:
How to integrate such computing-based activities in the undergraduate programs
when the students are *not* interested in mathematics, physics, and
programming?


Do we need to still follow the tradition and teach mathematics, physics, computations, chemistry, etc. in separate discipline-specific courses?

  * Uninteresting to first study tools when you want to study biology
  * Little understanding of what the tools are good for
  * Minor utilization of tools later in biology

=== It's time for new thinking  ===
  * Just-in-time teaching: teach tools *when needed*
  * Teach tools in the *context of biology*
  * Emphasize development of *intuition and understanding*
  * Base learning of the students' own *explorations in biology projects*
  * Integrate lab work with computing tools

=== The pedagogical framework ===

Aim: Develop intuition about the scientific method
 * Method: case-based learning
 * Coherent problem solving *in biology* by integrating
   mathematics, programming, physics/chemistry, ...
 * Starting point: data from lab or field experiments
 * Visualize data
 * Derive computational models directly from mathematical/intuitive *reasoning*
 * Program model(s), fit parameters, compare with data
 * Develop intuition and understanding based on
  * the principles behind the model
  * exploration of the model (``what if'')
  * prediction of new experiments






